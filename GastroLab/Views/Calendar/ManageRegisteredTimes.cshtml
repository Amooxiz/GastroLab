@using GastroLab.Application.ViewModels;
@using System.Globalization
@model GastroLab.Presentation.Controllers.CalendarController.WeeklyCalendarVM

@{
    ViewData["Title"] = "Manage Registered Times";
}

<style>
    /* Existing styles */
    table {
        border-collapse: collapse;
        width: 100%;
        table-layout: fixed;
    }

    th, td {
        border: 1px solid black;
        text-align: center;
        padding: 5px;
        height: 40px;
    }

    .selected {
        background-color: #defcf9 !important;
    }

    .sticky-top {
        position: sticky;
        top: 0;
        z-index: 1020;
    }

    body {
        overflow: hidden;
        /* Prevent text selection during drag */
        -webkit-user-select: none; /* Chrome/Safari */
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE10+ */
        user-select: none; /* Standard */
    }

    /* Apply partly transparent background to all header cells */
    thead th {
        background-color: rgba(232, 247, 154, 0.8) !important;
        /* background-color: rgba(217, 242, 255, 0.8) !important; */
    }

    /* Style for the date label (larger font size) */
    .date-label {
        font-size: 1.4em;
        font-weight: bold;
    }

    /* Style for the day label (smaller font size) */
    .day-label {
        font-size: 0.8em;
        color: #555;
    }

    /* Additional styles for the hour column */
    .hour-column {
        text-align: right;
        padding: 3px 15px !important;
        border: none;
    }

    .hour-column,
    .empty-cell {
        background-color: transparent !important;
    }

    /* New styles for the calendar container */
    .calendar-container {
        border: 1px solid #ccc;
        border-radius: 15px;
        background: #e4f5e5;
        box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 15px;
        margin-bottom: 20px;
    }

    .button-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

        .button-container form {
            margin: 0;
        }

        .button-container .form-group {
            margin: 0;
        }

        .button-container .form-control {
            min-width: 200px;
        }

    /* New styles to align header and radio buttons */
    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    /* Ensure the radio buttons are aligned properly */
    .view-options {
        display: flex;
        align-items: center;
    }
</style>

<div class="header-container">
    <h2>Manage Registered Times (@Model.BeginningOfTheWeek.ToString("yyyy-MM-dd") - @Model.BeginningOfTheWeek.AddDays(6).ToString("yyyy-MM-dd"))</h2>
    <!-- Radio buttons for Calendar view and List view -->
    <div class="btn-group view-options" role="group" aria-label="View Options">
        <input type="radio" class="btn-check" name="viewOption" id="calendarView" autocomplete="off" checked>
        <label class="btn btn-outline-primary" for="calendarView">Calendar View</label>

        <input type="radio" class="btn-check" name="viewOption" id="listView" autocomplete="off">
        <label class="btn btn-outline-primary" for="listView">List View</label>
    </div>
</div>

<div id="calendarDiv" class="calendar-container">
    <div class="button-container">
        <button type="button" class="btn btn-outline-primary" onclick="changeWeek(-7)">
            <i class="bi bi-arrow-left-circle-fill"></i> Previous week
        </button>
        <form method="get" asp-action="ManageRegisteredTimes">
            <div class="form-group">
                <!-- User dropdown -->
                @Html.DropDownList("userId", (SelectList)ViewBag.Users, "Select a user", new { @class = "form-control", @id = "userId", @onchange = "this.form.submit();" })
                <input type="hidden" name="date" value="@Model.BeginningOfTheWeek.ToString("yyyy-MM-dd")" />
            </div>
        </form>
        <button type="button" class="btn btn-outline-primary" onclick="changeWeek(7)">
            Next week <i class="bi bi-arrow-right-circle-fill"></i>
        </button>
    </div>

    <div class="table-responsive" style="overflow-y: auto; max-height: calc(100vh - 300px);">
        <table class="table">
            <colgroup>
                <col style="width: 55px;"> <!-- Narrow first column -->
                @foreach (var day in Model.DaysOfWeek)
                {
                    <col style="width: auto;">
                }
            </colgroup>
            <thead class="sticky-top">
                <tr>
                    <th style="border: none; opacity: 0;">
                        <!-- Empty header cell -->
                    </th>

                    @foreach (var day in Model.DaysOfWeek)
                    {
                        <th style="border: none;">
                            <span class="date-label">
                                @(day.Day < 10 ? "0" + day.Day : day.Day)
                            </span>
                            <br />
                            <span class="day-label">
                                @day.ToString("dddd", new CultureInfo("en-US"))
                            </span>
                        </th>
                    }

                </tr>
            </thead>
            <tbody>
                @for (int hour = 0; hour < 24; hour++)
                {
                    @for (int minute = 0; minute < 60; minute += 30)
                    {
                        int totalMinutes = hour * 60 + minute;
                        string tableCellStyle = "";
                        @if (minute == 0)
                        {
                            tableCellStyle = "border-top: 2px solid black; border-bottom: 2px dashed black;";
                        }
                        else
                        {
                            tableCellStyle = "border-top: 2px dashed black; border-bottom: 2px solid black;";
                        }
                        <tr>
                            @if (minute == 0)
                            {
                                <td class="hour-column"><span>@hour</span></td>
                            }
                            else
                            {
                                <td class="empty-cell" style="border: none;"></td>
                            }
                            @foreach (var day in Model.DaysOfWeek)
                            {
                                string tileId = day.ToString("yyyy-MM-dd") + "T" + String.Format("{0:00}:{1:00}", hour, minute);
                                bool isBreak = false;
                                if (ViewBag.UserRegisteredTimes != null && ViewBag.UserRegisteredTimes.Count > 0)
                                {
                                    List<TimeSlotVM> timeSlots = ViewBag.UserRegisteredTimes;
                                    @foreach (var timeSlot in timeSlots)
                                    {
                                        @if (timeSlot.DateFrom.Date == day.Date && (timeSlot.DateFrom.Hour * 60 + timeSlot.DateFrom.Minute) <= totalMinutes && (timeSlot.DateTo.Hour * 60 + timeSlot.DateTo.Minute) > totalMinutes)
                                        {
                                            if ((timeSlot.DateFrom.Hour * 60 + timeSlot.DateFrom.Minute) == totalMinutes)
                                            {
                                                <td class="calendar-cell registered-cell" style="background-color: #cadefc; @tableCellStyle">
                                                    @String.Format("{0:00}:{1:00} - {2:00}:{3:00}", timeSlot.DateFrom.Hour, timeSlot.DateFrom.Minute, timeSlot.DateTo.Hour, timeSlot.DateTo.Minute)
                                                </td>
                                            }
                                            else
                                            {
                                                <td class="calendar-cell registered-cell" style="background-color: #cadefc; @tableCellStyle"></td>
                                            }
                                            isBreak = true;
                                            break;
                                        }
                                    }
                                }
                                if (isBreak)
                                {
                                    continue;
                                }
                                <td class="calendar-cell" style="@tableCellStyle"></td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    function changeWeek(days) {
        var currentDate = new Date('@Model.BeginningOfTheWeek.ToString("yyyy-MM-dd")');
        currentDate.setDate(currentDate.getDate() + days); // Add days

        var userId = document.getElementById('userId').value;
        window.location.href = '?date=' + currentDate.toISOString().split('T')[0] + '&userId=' + userId;
    }

    // Event listener for view option radio buttons
    document.getElementById('calendarView').addEventListener('change', function () {
        if (this.checked) {
            // Stay on calendar view
            // Reload or do nothing
        }
    });

    document.getElementById('listView').addEventListener('change', function () {
        if (this.checked) {
            // Redirect to list view
            var userId = document.getElementById('userId').value;
            var date = '@Model.BeginningOfTheWeek.ToString("yyyy-MM-dd")';
            window.location.href = '@Url.Action("ManageRegisteredTimesListView", "Calendar")?userId=' + userId + '&date=' + date;
        }
    });

    // Add the DOMContentLoaded event listener
    document.addEventListener('DOMContentLoaded', function () {
        // Set the scroll position of the calendar to the middle when the page loads
        var calendarDiv = document.querySelector('#calendarDiv .table-responsive');
        if (calendarDiv) {
            calendarDiv.scrollTop = (calendarDiv.scrollHeight - calendarDiv.clientHeight) / 2;
        }
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
