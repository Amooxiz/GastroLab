@using GastroLab.Application.ViewModels;
@using System.Globalization
@using System.Web
@model GastroLab.Presentation.Controllers.CalendarController.WeeklyCalendarVM

@{
    ViewData["Title"] = "Register Time";
}

<style>
    /* Existing styles */
    table {
        border-collapse: collapse;
        width: 100%;
        table-layout: fixed;
    }

    th, td {
        border: 1px solid black;
        text-align: center;
        padding: 5px;
        height: 40px;
    }

    .selected {
        background-color: #defcf9 !important;
    }

    .sticky-top {
        position: sticky;
        top: 0;
        z-index: 1020;
    }

    body {
        overflow: hidden;
        /* Prevent text selection during drag */
        -webkit-user-select: none; /* Chrome/Safari */
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE10+ */
        user-select: none; /* Standard */
    }

    /* Apply partly transparent background to all header cells */
    thead th {
        background-color: rgba(232, 247, 154, 0.8) !important;
    }

    /* Style for the date label (larger font size) */
    .date-label {
        font-size: 1.4em;
        font-weight: bold;
    }

    /* Style for the day label (smaller font size) */
    .day-label {
        font-size: 0.8em;
        color: #555;
    }

    /* Additional styles for the hour column */
    .hour-column {
        text-align: right;
        padding: 3px 15px !important;
        border: none;
    }

    .hour-column,
    .empty-cell {
        background-color: transparent !important;
    }

    /* Hover effect for selectable cells */
    .calendar-cell:hover {
        background-color: #e6e6e6; /* Light gray color */
        cursor: pointer;
    }

    /* Disable hover effect on registered cells */
    .registered-cell:hover {
        cursor: pointer;
    }

    /* Highlight all cells in a timeslot on hover */
    .timeslot-hover {
        background-color: #a0d0f0 !important; /* Slightly darker color */
    }

    /* New styles for the calendar container */
    .calendar-container {
        border: 1px solid #ccc;
        border-radius: 15px;
        background: #e4f5e5;
        box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 15px;
        margin-bottom: 20px;
    }

    .button-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

        .button-container form {
            margin: 0;
        }

        .button-container .form-group {
            margin: 0;
        }

        .button-container .form-control {
            min-width: 200px;
        }
</style>

<h2>Register Time (@Model.BeginningOfTheWeek.ToString("yyyy-MM-dd") - @Model.BeginningOfTheWeek.AddDays(6).ToString("yyyy-MM-dd"))</h2>

<div class="calendar-container">
    <div class="button-container">
        <button type="button" class="btn btn-outline-primary" onclick="changeWeek(-7)">
            <i class="bi bi-arrow-left-circle-fill"></i> Previous week
        </button>
        <!-- Removed user dropdown -->
        <button type="button" class="btn btn-outline-primary" onclick="changeWeek(7)">
            Next week <i class="bi bi-arrow-right-circle-fill"></i>
        </button>
    </div>

    <div class="table-responsive" style="overflow-y: auto; max-height: calc(100vh - 300px);">
        <table class="table">
            <colgroup>
                <col style="width: 55px;"> <!-- Narrow first column -->
                @foreach (var day in Model.DaysOfWeek)
                {
                    <col style="width: auto;"> <!-- Equal widths for other columns -->
                }
            </colgroup>
            <thead class="sticky-top">
                <tr>
                    <th style="border: none; opacity: 0;">
                        <!-- Empty header cell -->
                    </th>

                    @foreach (var day in Model.DaysOfWeek)
                    {
                        <th style="border: none;">
                            <span class="date-label">
                                @(day.Day < 10 ? "0" + day.Day : day.Day)
                            </span>
                            <br />
                            <span class="day-label">
                                @day.ToString("dddd", new CultureInfo("en-US"))
                            </span>
                        </th>
                    }

                </tr>
            </thead>
            <tbody>
                @for (int hour = 0; hour < 24; hour++)
                {
                    @for (int minute = 0; minute < 60; minute += 30)
                    {
                        int totalMinutes = hour * 60 + minute;
                        string tableCellStyle = "";
                        @if (minute == 0)
                        {
                            tableCellStyle = "border-top: 2px solid black; border-bottom: 2px dashed black;";
                        }
                        else
                        {
                            tableCellStyle = "border-top: 2px dashed black; border-bottom: 2px solid black;";
                        }
                        <tr>
                            @if (minute == 0)
                            {
                                <td class="hour-column"><span>@hour</span></td>
                            }
                            else
                            {
                                <td class="empty-cell" style="border: none;"></td>
                            }
                            @foreach (var day in Model.DaysOfWeek)
                            {
                                string tileId = day.ToString("yyyy-MM-dd") + "T" + String.Format("{0:00}:{1:00}", hour, minute);
                                bool isBreak = false;
                                if (ViewBag.UserRegisteredTimes != null && ViewBag.UserRegisteredTimes.Count > 0)
                                {
                                    List<TimeSlotVM> timeSlots = ViewBag.UserRegisteredTimes;
                                    for (int timeslotIndex = 0; timeslotIndex < timeSlots.Count; timeslotIndex++)
                                    {
                                        var timeSlot = timeSlots[timeslotIndex];
                                        if (timeSlot.DateFrom.Date == day.Date && (timeSlot.DateFrom.Hour * 60 + timeSlot.DateFrom.Minute) <= totalMinutes && (timeSlot.DateTo.Hour * 60 + timeSlot.DateTo.Minute) > totalMinutes)
                                        {
                                            <!-- Include data attributes on all registered cells -->
                                            <td class="calendar-cell registered-cell"
                                                data-day="@day.ToString("yyyy-MM-dd")"
                                                data-hour="@hour"
                                                data-minute="@minute"
                                                data-timeslot-id="@timeSlot.Id"
                                                data-datefrom="@timeSlot.DateFrom.ToString("yyyy-MM-dd HH:mm")"
                                                data-dateto="@timeSlot.DateTo.ToString("yyyy-MM-dd HH:mm")"
                                                data-description="@Html.Raw(HttpUtility.JavaScriptStringEncode(timeSlot.Description))"
                                                style="background-color: #cadefc; @tableCellStyle">
                                                @if ((timeSlot.DateFrom.Hour * 60 + timeSlot.DateFrom.Minute) == totalMinutes)
                                                {
                                                    @String.Format("{0:00}:{1:00} - {2:00}:{3:00}", timeSlot.DateFrom.Hour, timeSlot.DateFrom.Minute, timeSlot.DateTo.Hour, timeSlot.DateTo.Minute)
                                                }
                                            </td>
                                            isBreak = true;
                                            break;
                                        }
                                    }
                                }
                                if (isBreak)
                                {
                                    continue;
                                }
                                <!-- Added class and data attributes to cells -->
                                <td class="calendar-cell"
                                    data-day="@day.ToString("yyyy-MM-dd")"
                                    data-hour="@hour"
                                    data-minute="@minute"
                                    style="@tableCellStyle"></td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="workingHoursModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="workingHoursModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="workingHoursModalLabel">Add Registered Time</h1>
                <button type="button" class="btn-close cancel-modal-btn" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Start Date Row -->
                <div class="mb-3">
                    <label for="startDate" class="form-label">Start Date</label>
                    <div class="d-flex">
                        <input type="date" class="form-control me-2" id="startDate" readonly>
                        <select class="form-select" id="startTime">
                            <!-- Options will be populated by JavaScript -->
                        </select>
                    </div>
                </div>
                <!-- Finish Date Row -->
                <div class="mb-3">
                    <label for="finishDate" class="form-label">Finish Date</label>
                    <div class="d-flex">
                        <input type="date" class="form-control me-2" id="finishDate" readonly>
                        <select class="form-select" id="finishTime">
                            <!-- Options will be populated by JavaScript -->
                        </select>
                    </div>
                </div>
                <!-- Description Row -->
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <input type="text" class="form-control" id="description">
                </div>
            </div>
            <!-- Modal Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary cancel-modal-btn" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="deleteRegisteredTimeBtn" style="display: none;">Delete</button>
                <button type="button" class="btn btn-primary" id="saveRegisteredTimeBtn" style="display: none;">Save</button>
                <button type="button" class="btn btn-primary" id="addWorkingHoursBtn">Add Registered Time</button>
            </div>
        </div>
    </div>
</div>

<script>
    let isMouseDown = false;
    let selectedDay = null;
    let selectedCells = [];
    let startCell = null;
    let startCellTime = null;
    let columnCells = [];
    let selectionValid = true;
    let isEditing = false;
    let editingTimeslotId = null;

    let selectedStartDate = null;
    let selectedFinishDate = null;
    let selectedStartTime = null;
    let selectedFinishTime = null;
    let selectedDescription = '';

    const currentUserId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value';

    document.addEventListener('mousedown', function (e) {
        if (e.button !== 0) return; // Only respond to left-click
        let cell = e.target.closest('.calendar-cell');
        if (cell) {
            if (cell.classList.contains('registered-cell')) {
                // Do nothing if the cell is a registered cell
                return;
            }
            e.preventDefault(); // Prevent text selection
            clearSelection();
            isMouseDown = true;
            startCell = cell;
            selectedDay = cell.getAttribute('data-day');
            startCellTime = parseInt(cell.getAttribute('data-hour')) * 60 + parseInt(cell.getAttribute('data-minute'));
            columnCells = Array.from(document.querySelectorAll('.calendar-cell[data-day="' + selectedDay + '"]'));
            updateSelection(cell);
        }
    });

    document.addEventListener('mouseover', function (e) {
        if (isMouseDown) {
            let cell = e.target.closest('.calendar-cell');
            if (cell && cell.getAttribute('data-day') === selectedDay) {
                updateSelection(cell);
            }
        }
    });

    document.addEventListener('mouseup', function (e) {
        if (e.button !== 0) return; // Only respond to left-click
        if (isMouseDown) {
            isMouseDown = false;
            if (selectedCells.length > 0 && selectionValid) {
                isEditing = false;
                showModal();
            } else {
                alert("You can only register time on free time slots");
                clearSelection();
            }
            selectedDay = null;
        }
    });

    function updateSelection(currentCell) {
        let currentCellTime = parseInt(currentCell.getAttribute('data-hour')) * 60 +
            parseInt(currentCell.getAttribute('data-minute'));
        let startTime = startCellTime;
        let endTime = currentCellTime;

        selectedCells = []; // Reset selectedCells array

        selectionValid = true;

        // Get indices of startCell and currentCell in columnCells
        let startIndex = columnCells.findIndex(cell => cell === startCell);
        let endIndex = columnCells.findIndex(cell => cell === currentCell);

        if (startIndex === -1 || endIndex === -1) {
            selectionValid = false;
            return;
        }

        let increment = startIndex <= endIndex ? 1 : -1;

        let i = startIndex;
        while (true) {
            let cell = columnCells[i];

            if (cell.classList.contains('registered-cell')) {
                // Stop selection at the registered cell
                selectionValid = false;
                break;
            }

            if (!cell.classList.contains('selected')) {
                cell.classList.add('selected');
            }
            selectedCells.push(cell);

            if (i === endIndex) break;
            i += increment;
        }

        // Remove 'selected' class from cells not in selectedCells
        columnCells.forEach(cell => {
            if (!selectedCells.includes(cell) && cell.classList.contains('selected')) {
                cell.classList.remove('selected');
            }
        });
    }

    function clearSelection() {
        selectedCells.forEach(cell => {
            cell.classList.remove('selected');
        });
        selectedCells = [];
    }

    function showModal(isEdit = false) {
        // Prepare time options
        const timeOptions = [];
        for (let h = 0; h < 24; h++) {
            for (let m = 0; m < 60; m += 30) {
                const timeString = ('0' + h).slice(-2) + ':' + ('0' + m).slice(-2);
                timeOptions.push(timeString);
            }
        }

        // Populate time selects
        const startTimeSelect = document.getElementById('startTime');
        const finishTimeSelect = document.getElementById('finishTime');

        startTimeSelect.innerHTML = '';
        finishTimeSelect.innerHTML = '';

        timeOptions.forEach(time => {
            const option1 = document.createElement('option');
            option1.value = time;
            option1.text = time;
            startTimeSelect.add(option1);

            const option2 = document.createElement('option');
            option2.value = time;
            option2.text = time;
            finishTimeSelect.add(option2);
        });

        if (isEdit) {
            // Set modal title
            document.getElementById('workingHoursModalLabel').innerText = 'Edit Registered Time';
            // Show or hide buttons
            document.getElementById('deleteRegisteredTimeBtn').style.display = 'inline-block';
            document.getElementById('addWorkingHoursBtn').style.display = 'none';
            document.getElementById('saveRegisteredTimeBtn').style.display = 'inline-block';

            // Set date fields
            document.getElementById('startDate').value = selectedStartDate;
            document.getElementById('finishDate').value = selectedFinishDate;

            // Set time fields
            document.getElementById('startTime').value = selectedStartTime;
            document.getElementById('finishTime').value = selectedFinishTime;

            // Set description
            document.getElementById('description').value = selectedDescription;

        } else {
            editingTimeslotId = null;
            selectedDescription = '';
            // Existing code for adding a new timeslot
            // Get start and finish times
            let times = selectedCells.map(cell => {
                return {
                    hour: parseInt(cell.getAttribute('data-hour')),
                    minute: parseInt(cell.getAttribute('data-minute'))
                };
            });

            // Sort times to find earliest and latest
            times.sort((a, b) => {
                if (a.hour === b.hour) {
                    return a.minute - b.minute;
                }
                return a.hour - b.hour;
            });

            const earliestTime = times[0];
            const latestTime = times[times.length - 1];

            // Set selected values
            selectedStartDate = selectedDay;
            selectedFinishDate = selectedDay;

            selectedStartTime = ('0' + earliestTime.hour).slice(-2) + ':' + ('0' + earliestTime.minute).slice(-2);
            // Updated finish time calculation
            // Calculate total minutes from midnight
            let totalMinutes = latestTime.hour * 60 + latestTime.minute + 30;

            // Calculate finish hour and minute
            let finishHour = Math.floor(totalMinutes / 60) % 24; // Modulo 24 to handle wrap-around at midnight
            let finishMinute = totalMinutes % 60;

            selectedFinishTime = ('0' + finishHour).slice(-2) + ':' + ('0' + finishMinute).slice(-2);

            document.getElementById('startDate').value = selectedStartDate;
            document.getElementById('finishDate').value = selectedFinishDate;
            document.getElementById('startTime').value = selectedStartTime;
            document.getElementById('finishTime').value = selectedFinishTime;

            // Clear description
            document.getElementById('description').value = '';
            // Set modal title
            document.getElementById('workingHoursModalLabel').innerText = 'Add Registered Time';
            // Show or hide buttons
            document.getElementById('deleteRegisteredTimeBtn').style.display = 'none';
            document.getElementById('addWorkingHoursBtn').style.display = 'inline-block';
            document.getElementById('saveRegisteredTimeBtn').style.display = 'none';
        }

        // Show the modal
        var workingHoursModal = new bootstrap.Modal(document.getElementById('workingHoursModal'));
        workingHoursModal.show();
    }


    function parseTime(timeStr) {
        const [hours, minutes] = timeStr.split(':').map(Number);
        return hours * 60 + minutes;
    }

    function changeWeek(days) {
        var currentDate = new Date('@Model.BeginningOfTheWeek.ToString("yyyy-MM-dd")');
        currentDate.setDate(currentDate.getDate() + days); // Add days

        window.location.href = '?date=' + currentDate.toISOString().split('T')[0];
    }

    document.getElementById('addWorkingHoursBtn').addEventListener('click', function () {
        // Collect data from modal fields
        const startDate = document.getElementById('startDate').value;
        const startTime = document.getElementById('startTime').value;
        const finishDate = document.getElementById('finishDate').value;
        const finishTime = document.getElementById('finishTime').value;
        const description = document.getElementById('description').value;
        const userId = currentUserId; // Use the current user's ID

        // Prepare data to send
        const data = {
            startDate: startDate,
            startTime: startTime,
            finishDate: finishDate,
            finishTime: finishTime,
            userId: userId,
            description: description
        };

        // Get the anti-forgery token
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Send AJAX POST request
        fetch('@Url.Action("RegisterTime", "Calendar")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': antiForgeryToken
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.ok) {
                    // Request was successful
                    return response.json();
                } else {
                    // Handle errors
                    throw new Error('Error registering time');
                }
            })
            .then(result => {
                // Close the modal
                var workingHoursModal = bootstrap.Modal.getInstance(document.getElementById('workingHoursModal'));
                workingHoursModal.hide();

                // Clear the selection
                clearSelection();

                // Refresh the page to show the updated times
                location.reload();
            })
            .catch(error => {
                alert(error.message);
            });

    });

    // Event listeners for "Cancel" buttons (both Cancel and Close)
    document.querySelectorAll('.cancel-modal-btn').forEach(function (element) {
        element.addEventListener('click', function () {
            // Clear the selection when any "Cancel" button is clicked
            clearSelection();
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        // Add event listeners to registered cells for hover and click
        const registeredCells = document.querySelectorAll('.registered-cell');
        registeredCells.forEach(function (cell) {
            cell.addEventListener('mouseenter', function () {
                const timeslotId = this.getAttribute('data-timeslot-id');
                const timeslotCells = document.querySelectorAll('.registered-cell[data-timeslot-id="' + timeslotId + '"]');
                timeslotCells.forEach(function (cell) {
                    cell.classList.add('timeslot-hover');
                });
            });

            cell.addEventListener('mouseleave', function () {
                const timeslotId = this.getAttribute('data-timeslot-id');
                const timeslotCells = document.querySelectorAll('.registered-cell[data-timeslot-id="' + timeslotId + '"]');
                timeslotCells.forEach(function (cell) {
                    cell.classList.remove('timeslot-hover');
                });
            });

            cell.addEventListener('click', function (event) {
                // Prevent event propagation to avoid triggering other handlers
                event.stopPropagation();
                isEditing = true;
                editingTimeslotId = this.getAttribute('data-timeslot-id');

                // Get timeslot data
                const dateFrom = this.getAttribute('data-datefrom');
                const dateTo = this.getAttribute('data-dateto');
                selectedDescription = this.getAttribute('data-description');

                selectedStartDate = dateFrom.split(' ')[0];
                selectedFinishDate = dateTo.split(' ')[0];

                selectedStartTime = dateFrom.split(' ')[1].slice(0, 5);
                selectedFinishTime = dateTo.split(' ')[1].slice(0, 5);

                // Show modal in edit mode
                showModal(true);
            });

        });
    });

    // Save button handler
    document.getElementById('saveRegisteredTimeBtn').addEventListener('click', function () {
        // Collect data from modal fields
        const startDate = document.getElementById('startDate').value;
        const startTime = document.getElementById('startTime').value;
        const finishDate = document.getElementById('finishDate').value;
        const finishTime = document.getElementById('finishTime').value;
        const description = document.getElementById('description').value;
        const userId = currentUserId;

        // Prepare data to send
        const data = {
            TimeslotId: editingTimeslotId,
            StartDate: startDate + 'T' + startTime,
            FinishDate: finishDate + 'T' + finishTime,
            Description: description
        };


        // Get the anti-forgery token
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("UpdateRegisteredTime", "Calendar")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': antiForgeryToken
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            } else if (response.status === 400) {
                return response.text().then(text => { throw new Error(text); });
            } else if (response.status === 403) {
                throw new Error('Nie masz uprawnień do wykonania tej akcji.');
            } else {
                throw new Error('Wystąpił błąd podczas aktualizacji czasu.');
            }
        })
        .then(result => {
            // Zamknij modal
            var workingHoursModal = bootstrap.Modal.getInstance(document.getElementById('workingHoursModal'));
            workingHoursModal.hide();
        
            // Odśwież stronę, aby pokazać zaktualizowane czasy
            location.reload();
        })
        .catch(error => {
            alert(error.message);
        });

    });

    // Delete button handler
    document.getElementById('deleteRegisteredTimeBtn').addEventListener('click', function () {
        // Prepare data to send
        const data = {
            timeslotId: editingTimeslotId
        };

        // Get the anti-forgery token
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Send AJAX POST request to delete
        fetch('@Url.Action("DeleteRegisteredTime", "Calendar")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': antiForgeryToken
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.ok) {
                    // Request was successful
                    return response.json();
                } else {
                    // Handle errors
                    throw new Error('Error deleting time');
                }
            })
            .then(result => {
                // Close the modal
                var workingHoursModal = bootstrap.Modal.getInstance(document.getElementById('workingHoursModal'));
                workingHoursModal.hide();

                // Refresh the page to show the updated times
                location.reload();
            })
            .catch(error => {
                alert(error.message);
            });
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
