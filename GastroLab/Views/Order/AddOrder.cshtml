@model GastroLab.Application.ViewModels.OrderVM

@{
    ViewData["Title"] = "AddOrder";
}

<style>
    ul.list-unstyled {
        padding-left: 0;
        margin-bottom: 10px;
    }

    ul.list-unstyled li {
        margin-bottom: 5px;
    }

    h4 {
        margin-top: 20px;
    }

    hr {
        margin: 10px 0;
    }
</style>

<h1>AddOrder</h1>

<h4>Order</h4>
<hr />
<table class="table">
    <thead>
        <tr>
            <th>
                Image
            </th>
            <th>
                Name
            </th>
            <th>
                Price
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in ViewBag.AllProducts)
        {
            <tr>
                <td>
                    @item.Image
                </td>
                <td>
                    @item.Name
                </td>
                <td>
                    @item.Price
                </td>
                <td>
                    <a class="add-button" id="@item.Id" price="@item.Price" name="@item.Name">Add</a>
                    @* @if (ViewBag.AddedProducts != null)
                    {

                        var quantity = 0;
                        @foreach(var product in ViewBag.AddedProducts.Products)
                        {
                            @if (product.ProductId == item.Id)
                            {
                                quantity += @product.Quantity;
                                
                            }
                        }
                        if (quantity > 0)
                        {
                            <a class="remove-button" id="@item.Id">Remove</a>
                            <label class="quantity-label" id="@item.Id">Quantity: @quantity</label>
                        }
                        
                    } *@
                </td>
            </tr>
            <tr class="optionsetscontainer" id="@item.Id">
            </tr>
        }
    </tbody>
</table>
<div class="row">
    <div class="col-md-8">
        <form asp-action="AddOrder">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="DeliveryMethod" class="control-label"></label>
                <select asp-for="DeliveryMethod" class="form-control" id="deliveryMethod" asp-items="ViewBag.DeliveryMethods"></select>
                <span asp-validation-for="DeliveryMethod" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="isScheduledDelivery" class="control-label"></label>
                <input asp-for="isScheduledDelivery" type="checkbox" id="isScheduled"/>
                <span asp-validation-for="isScheduledDelivery" class="text-danger"></span>
            </div>
            <div class="form-group" id="scheduledDate">
                <label asp-for="ScheduledDeliveryDate" class="control-label"></label>
                <input asp-for="ScheduledDeliveryDate" class="form-control"  />
                <span asp-validation-for="ScheduledDeliveryDate" class="text-danger"></span>
            </div>
            <div class="form-group" id="waitingTime">
                <label asp-for="WaitingTime" class="control-label"></label>
                <input asp-for="WaitingTime" class="form-control" />
                <span asp-validation-for="WaitingTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Comment" class="control-label"></label>
                <input asp-for="Comment" class="form-control" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group" id="tableNrGroup">
                <label asp-for="TableNr" class="control-label"></label>
                <input asp-for="TableNr" class="form-control" />
                <span asp-validation-for="TableNr" class="text-danger"></span>
            </div>

            <div class="form-group address-group" id="addressCityGroup">
                <label asp-for="Address.City" class="control-label"></label>
                <input asp-for="Address.City" class="form-control" />
                <span asp-validation-for="Address.City" class="text-danger"></span>
            </div>

            <div class="form-group address-group" id="addressStreetGroup">
                <label asp-for="Address.Street" class="control-label"></label>
                <input asp-for="Address.Street" class="form-control" />
                <span asp-validation-for="Address.Street" class="text-danger"></span>
            </div>

            <div class="form-group address-group" id="addressPostCodeGroup">
                <label asp-for="Address.PostCode" class="control-label"></label>
                <input asp-for="Address.PostCode" class="form-control" />
                <span asp-validation-for="Address.PostCode" class="text-danger"></span>
            </div>

            <div class="form-group address-group" id="addressFlatNumberGroup">
                <label asp-for="Address.FlatNumber" class="control-label"></label>
                <input asp-for="Address.FlatNumber" class="form-control" />
                <span asp-validation-for="Address.FlatNumber" class="text-danger"></span>
            </div>

            <div class="form-group address-group" id="addressHouseNumberGroup">
                <label asp-for="Address.HouseNumber" class="control-label"></label>
                <input asp-for="Address.HouseNumber" class="form-control" />
                <span asp-validation-for="Address.HouseNumber" class="text-danger"></span>
            </div>

            @if (ViewBag.AddedProducts == null)
            {
                <label id="totalPrice">
                    Total price: 0.00
                </label>
            }
            else
            {
                <label id="totalPrice">
                    Total price: @ViewBag.AddedProducts.TotalPrice zł
                </label>
            }
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-4">
        <h4>Your Order</h4>
        <hr />
        @if (ViewBag.AddedProducts != null && ViewBag.AddedProducts.Products.Count > 0)
        {
            <ul class="list-unstyled" id="orderSummary">
                @foreach (var product in ViewBag.AddedProducts.Products)
                {
                    <li id ="product-@product.ProductId">
                        <strong>@product.Quantity x @product.ProductName</strong>
                        <span style="float:right">@product.Price.ToString("F2") zł</span>
                        <ul class="list-unstyled">
                            @foreach (var optionSet in product.SelectedOptions)
                            {
                                <li>@optionSet.OptionSetName:</li>
                                <ul class="list-unstyled">
                                    <li>- @optionSet.OptionName</li>
                                </ul>
                            }
                        </ul>
                        <button class="remove-product-button btn btn-danger btn-sm" data-product-id="@product.ProductId">Remove</button>
                        <hr />
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No items in your order.</p>
        }
    </div>
</div>

<div>
    <a asp-action="ManageOrders">Back to List</a>
</div>

@section Scripts {
    <script>
        window.addEventListener('load', function () {
            // Add event listeners to all "Add" buttons
            var addButtons = document.querySelectorAll('.add-button');
            addButtons.forEach(function (button) {
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    var productId = button.getAttribute('id');
                    debugger;
                    var price = button.getAttribute('price');
                    var productName = button.getAttribute('name');
                    console.log(price);
                    console.log(parseFloat(price.replace(',', '.')));
                    var optionSetsContainer = document.querySelector(`tr.optionsetscontainer[id = "${productId}"]`); // Get the option sets container for the selected product
                    
                    if (optionSetsContainer == null) {
                        console.log('Option sets container not found');
                    }
                    
                    // Make an AJAX request to fetch the option sets and options for the selected product
                    fetch('/OptionSet/GetOptions/' + productId)
                        .then(function (response) {
                            return response.json();
                        })
                        .then(function (data) {
                            // Build the HTML for option sets and options
                            var optionSetsHTML = '';
                            data.optionSets.forEach(function (optionSet) {
                                optionSetsHTML += `
                                        <h5>${optionSet.displayName}</h5>
                                        <ul class="option-list">
                                    `;
                                optionSet.options.forEach(function (option) {
                                    optionSetsHTML += `
                                            <li>
                                                <label>
                                                                    <input type="checkbox" class="option-checkbox" data-price="${option.price ?? 0}" data-optionset-id="${optionSet.id}" data-optionset-name="${optionSet.displayName}" data-option-id="${option.id}" data-option-name="${option.displayName}"/>
                                                    ${option.displayName} +${(option.price ?? 0).toFixed(2)}
                                                </label>
                                        `;
                                });
                                optionSetsHTML += '</ul>';
                            });
                            optionSetsHTML += '<input type="number" class="quantity-input" value="1" min="1" />';
                            optionSetsContainer.innerHTML = optionSetsHTML;
                            // Add event listeners to checkboxes
                            var optionCheckboxes = optionSetsContainer.querySelectorAll('.option-checkbox');
                            optionCheckboxes.forEach(function (checkbox) {
                                checkbox.addEventListener('change', function () {
                                    // Uncheck other checkboxes within the same option set
                                    var optionSetId = checkbox.getAttribute('data-optionset-id');
                                    var checkboxesInSameOptionSet = optionSetsContainer.querySelectorAll(`.option-checkbox[data-optionset-id="${optionSetId}"]`);
                                    checkboxesInSameOptionSet.forEach(function (otherCheckbox) {
                                        if (otherCheckbox !== checkbox) {
                                            otherCheckbox.checked = false;
                                        }
                                    });
                                });
                            });
                            // Add a "Submit" button to the option sets container
                            var submitButton = document.createElement('button');
                            submitButton.textContent = 'Add to Order';
                            submitButton.addEventListener('click', function () {
                                var selectedOptions = [];
                                optionCheckboxes.forEach(function (checkbox) {
                                    if (checkbox.checked) {
                                        selectedOptions.push({
                                            OptionSetId: parseInt(checkbox.getAttribute('data-optionset-id')),
                                            OptionSetName: checkbox.getAttribute('data-optionset-name'),
                                            OptionId: parseInt(checkbox.getAttribute('data-option-id')),
                                            OptionName: checkbox.getAttribute('data-option-name'),
                                            Price: parseFloat(checkbox.getAttribute('data-price'))
                                        });
                                    }
                                });

                                var quantityInput = optionSetsContainer.querySelector('.quantity-input');
                                var quantity = parseInt(quantityInput.value) || 1; // Default to 1 if no valid input

                                // Prepare the data to be sent to the server
                                var data = {
                                    ProductId: parseInt(productId),
                                    ProductName: productName,
                                    Quantity: quantity,
                                    Price: parseFloat(price.replace(',', '.')),
                                    SelectedOptions: selectedOptions
                                };

                                // Send the data to the server using fetch
                                fetch('/Order/StoreProduct', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify(data)
                                })
                                    .then(response => response.json())
                                    .then(result => {
                                        // Handle the server response if needed
                                        console.log('Server response:', result);
                                    })
                                    .catch(error => {
                                        console.error('Error sending data:', error);
                                    });
                                optionSetsContainer.style.display = 'none';

                                setTimeout(() => {
                                    window.location.reload();
                                }, 100);
                            });

                            // Append the submit button to the option sets container
                            optionSetsContainer.appendChild(submitButton);
                            
                        })
                        .catch(function (error) {
                            console.error('Error fetching options:', error);
                        });
                });
            });

            // // Add event listeners to all "Remove" buttons
            // var removeButtons = document.querySelectorAll('.remove-button');
            // removeButtons.forEach(function (button) {
            //     button.addEventListener('click', function (event) {
            //         event.preventDefault();
            //         var productId = button.getAttribute('id');

            //         // Send the remove request to the server
            //         fetch('/Order/RemoveProduct', {
            //             method: 'POST',
            //             headers: {
            //                 'Content-Type': 'application/json'
            //             },
            //             body: JSON.stringify(parseInt(productId))
            //         })
            //             .then(response => response.json())
            //             .then(result => {
            //                 // Handle the server response if needed
            //                 console.log('Server response:', result);
            //                 // Optionally refresh the page or update the UI to reflect the removal
            //                 setTimeout(() => {
            //                     window.location.reload();
            //                 }, 100);
            //             })
            //             .catch(error => {
            //                 console.error('Error removing product:', error);
            //             });
            //     });
            // });
        });
        $(document).ready(function () {
            function toggleFormElements() {
                var selectedMethod = $('#deliveryMethod').val();
                var isScheduledChecked = $('#isScheduled').prop('checked');

                if (selectedMethod == '3') { // DineIn
                    $('#tableNrGroup').show();
                    $('.address-group').hide();
                } else if (selectedMethod == '1') { // Delivery
                    $('#tableNrGroup').hide();
                    $('.address-group').show();
                } else if (selectedMethod == '2') { // Pickup
                    $('#tableNrGroup').hide();
                    $('.address-group').hide();
                }

                if (isScheduledChecked) {
                    $('#scheduledDate').show();
                    $('#waitingTime').hide();
                } else {
                    $('#scheduledDate').hide();
                    $('#waitingTime').show();
                }
            }

            // Run on page load
            toggleFormElements();

            // Run whenever the selection changes
            $('#deliveryMethod').change(function () {
                toggleFormElements();
            });

            $('#isScheduled').change(function () {
                toggleFormElements();
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            var orderSummary = document.getElementById('orderSummary');

            orderSummary.addEventListener('click', function (event) {
                if (event.target && event.target.matches('.remove-product-button')) {
                    var productId = event.target.getAttribute('data-product-id');

                    // Send the remove request to the server
                    fetch('/Order/RemoveProduct', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(parseInt(productId))
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            var productElement = document.getElementById('product-' + productId);
                            var quantityLabel = productElement.querySelector('strong');
                            var quantity = parseInt(quantityLabel.textContent.split('x')[0].trim());

                            if (quantity > 1) {
                                // Decrease the quantity
                                quantity--;
                                quantityLabel.textContent = `${quantity} x ${result.productName}`;
                            } else {
                                // Remove the product element from the DOM
                                productElement.remove();
                            }

                            // Check if the list is now empty and show "No items in your order."
                            if (orderSummary.children.length === 0) {
                                orderSummary.innerHTML = '<p>No items in your order.</p>';
                            }

                            // Update the total price
                            document.querySelector('#totalPrice').textContent = `Total price: ${result.totalPrice} zł`;
                        } else {
                            console.error('Failed to remove the product.');
                        }
                    })
                    .catch(error => {
                        console.error('Error removing product:', error);
                    });
                }
            });
        });

    </script>

    
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
