@model GastroLab.Application.ViewModels.OrderVM

@{
    ViewData["Title"] = "EditOrder";
}

<style>
    ul.list-unstyled {
        padding-left: 0;
        margin-bottom: 10px;
    }

        ul.list-unstyled li {
            margin-bottom: 5px;
        }

    h4 {
        margin-top: 20px;
    }

    hr {
        margin: 10px 0;
    }

</style>

<h1>Edit order</h1>



<form asp-action="EditOrder" method="post" id="editOrderForm">
    <input type="hidden" asp-for="Id" />
    <div class="row">

        <div class="col-md-8">
            <div class="card mb-3">
                <div class="card-header">
                    <h4>Order details</h4>
                </div>
                <div class="card-body bg-light">
                    <div class="form-group">
                        <label asp-for="DeliveryMethod" class="control-label"></label>
                        <select asp-for="DeliveryMethod" class="form-control" id="deliveryMethod" asp-items="ViewBag.DeliveryMethods"></select>
                        <span asp-validation-for="DeliveryMethod" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="isScheduledDelivery" class="control-label"></label>
                        <input asp-for="isScheduledDelivery" type="checkbox" id="isScheduled" />
                        <span asp-validation-for="isScheduledDelivery" class="text-danger"></span>
                    </div>
                    <div class="form-group" id="scheduledDate">
                        <label asp-for="ScheduledDeliveryDate" class="control-label">Scheduled delivery date <span class="text-danger">*</span></label>
                        <input asp-for="ScheduledDeliveryDate" class="form-control" />
                        <span asp-validation-for="ScheduledDeliveryDate" class="text-danger"></span>
                    </div>
                    <div class="form-group" id="waitingTime">
                        <label asp-for="WaitingTime" class="control-label">Waiting time <span class="text-danger">*</span></label>
                        <input asp-for="WaitingTime" class="form-control" />
                        <span asp-validation-for="WaitingTime" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Comment" class="control-label"></label>
                        <input asp-for="Comment" class="form-control" />
                        <span asp-validation-for="Comment" class="text-danger"></span>
                    </div>
                    <br />
                    <div class="form-group" id="tableNrGroup">
                        <label asp-for="TableNr" class="control-label">Table number <span class="text-danger">*</span></label>
                        <input asp-for="TableNr" class="form-control" />
                        <span asp-validation-for="TableNr" class="text-danger"></span>
                    </div>

                    <div class="form-group address-group" id="addressCityGroup">
                        <label asp-for="Address.City" class="control-label">City <span class="text-danger">*</span></label>
                        <input asp-for="Address.City" class="form-control" />
                        <span asp-validation-for="Address.City" class="text-danger"></span>
                    </div>

                    <div class="form-group address-group" id="addressStreetGroup">
                        <label asp-for="Address.Street" class="control-label">Street <span class="text-danger">*</span></label>
                        <input asp-for="Address.Street" class="form-control" />
                        <span asp-validation-for="Address.Street" class="text-danger"></span>
                    </div>

                    <div class="form-group address-group" id="addressPostCodeGroup">
                        <label asp-for="Address.PostCode" class="control-label">Postal code <span class="text-danger">*</span></label>
                        <input asp-for="Address.PostCode" class="form-control" />
                        <span asp-validation-for="Address.PostCode" class="text-danger"></span>
                    </div>

                    <div class="form-group address-group" id="addressHouseNumberGroup">
                        <label asp-for="Address.HouseNumber" class="control-label">House number <span class="text-danger">*</span></label>
                        <input asp-for="Address.HouseNumber" class="form-control" />
                        <span asp-validation-for="Address.HouseNumber" class="text-danger"></span>
                    </div>

                    <div class="form-group address-group" id="addressFlatNumberGroup">
                        <label asp-for="Address.FlatNumber" class="control-label"></label>
                        <input asp-for="Address.FlatNumber" class="form-control" />
                        <span asp-validation-for="Address.FlatNumber" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h4>Your order</h4>
                </div>
                <div class="card-body bg-light">
                    <ul class="list-unstyled" id="orderSummary">
                        @if (Model.products != null && Model.products.Count > 0)
                        {
                            @for (int i = 0; i < Model.products.Count; i++)
                            {
                                var product = Model.products[i];
                                <li id="product-@product.Id-@i">
                                    <input type="hidden" name="products[@i].Id" value="@product.Id" />
                                    <input type="hidden" name="products[@i].OrderProductId" value="@product.OrderProductId" />
                                    <input type="hidden" name="products[@i].Name" value="@product.Name" />
                                    <input type="hidden" name="products[@i].Price" value="@product.Price" />
                                    <input type="hidden" name="products[@i].UnitPrice" value="@(product.Price / product.Quantity)" />
                                    <input type="hidden" name="products[@i].Quantity" value="@product.Quantity" class="quantity-input" />

                                    <strong>
                                        @product.Quantity x @product.Name
                                    </strong>
                                    @{
                                        var productTotalPrice = product.Price * product.Quantity;
                                    }
                                    <span style="float:right">@productTotalPrice.ToString("F2") PLN</span>
                                    @{
                                        var groupedOptions = product.OrderOptions.GroupBy(o => o.OptionSet.Name);
                                    }
                                    <ul class="list-unstyled">
                                        @foreach (var groupedOption in groupedOptions)
                                        {
                                            var optionIndexCounter = 0;
                                            <span>@groupedOption.Key:</span>
                                            <br>
                                            <li class="option-item">
                                                @foreach (var option in groupedOption)
                                                {
                                                    <input type="hidden" name="products[@i].OrderOptions[@optionIndexCounter].OptionSet.Id" value="@option.OptionSet.Id" />
                                                    <input type="hidden" name="products[@i].OrderOptions[@optionIndexCounter].OptionSet.Name" value="@option.OptionSet.Name" />
                                                    <input type="hidden" name="products[@i].OrderOptions[@optionIndexCounter].Option.Id" value="@option.Option.Id" />
                                                    <input type="hidden" name="products[@i].OrderOptions[@optionIndexCounter].Option.Name" value="@option.Option.Name" />
                                                    <input type="hidden" name="products[@i].OrderOptions[@optionIndexCounter].Option.Price" value="@option.Option.Price" />
                                                    <span>
                                                        - @option.Option.Name @(option.Option.Price.HasValue && option.Option.Price != 0 ? "+" + option.Option.Price.Value.ToString("F2") + " PLN" : "")
                                                    </span>
                                                    <br />
                                                    {
                                                        optionIndexCounter++;
                                                    }
                                                }
                                            </li>
                                        }
                                    </ul>
                                    <button type="button" class="edit-product-button btn btn-secondary btn-sm" data-index="@i">Edit</button>
                                    <button type="button" class="remove-product-button btn btn-danger btn-sm" data-index="@i">Remove</button>
                                    <hr />
                                </li>
                            }
                        }
                    </ul>
                    <p id="noItemsMessage" @(Model.products != null && Model.products.Count > 0 ? "style='display:none;'" : "")>No items in your order.</p>
                    <div class="form-group">
                        <label id="totalPrice">
                            Total price: @Model.TotalPrice.ToString("F2") PLN
                        </label>
                    </div>
                    <span asp-validation-for="products" class="text-danger" id="productsValidationText"></span>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-header">
                    <h4>Add products</h4>
                </div>
                <div class="card-body bg-light">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Price</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in ViewBag.AllProducts)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@item.Price.ToString("F2") PLN</td>
                                    <td>
                                        <button type="button" class="add-product-button btn btn-primary btn-sm" data-product-id="@item.Id">Add</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</form>

<div class="save-button">
    <button type="submit" form="editOrderForm" class="btn btn-success">Save</button>
</div>

<div>
    <a asp-action="ManageAllOrders">Back to List</a>
</div>

<div class="modal fade" id="productOptionsModal" tabindex="-1" role="dialog" aria-labelledby="productOptionsModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Choose product options</h5>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="confirm-add-product btn btn-primary">Add to order</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


    <script>
        var defaultDeliveryWaitingTimeInMinutes = @ViewBag.GlobalSettings.DefaultDeliveryWaitingTimeInMinutes;
        var defaultDineInWaitingTimeInMinutes = @ViewBag.GlobalSettings.DefaultDineInWaitingTimeInMinutes;

        $(document).ready(function () {
            var selectedProduct = null;

            function toggleFormElements() {
                var selectedMethod = $('#deliveryMethod').val();
                var isScheduledChecked = $('#isScheduled').prop('checked');

                if (selectedMethod == '3') { // DineIn
                    $('#tableNrGroup').show();
                    $('.address-group').hide();
                } else if (selectedMethod == '1') { // Delivery
                    $('#tableNrGroup').hide();
                    $('.address-group').show();
                } else if (selectedMethod == '2') { // Pickup
                    $('#tableNrGroup').hide();
                    $('.address-group').hide();
                }

                if (isScheduledChecked) {
                    $('#scheduledDate').show();
                    $('#waitingTime').hide();
                } else {
                    $('#scheduledDate').hide();
                    $('#waitingTime').show();
                }
            }

            toggleFormElements();

            $('#deliveryMethod').change(function () {
                toggleFormElements();
            });

            $('#isScheduled').change(function () {
                toggleFormElements();
            });

            $(document).on('click', '.edit-product-button', function () {
                var index = $(this).data('index');
                var $li = $('#orderSummary').children('li').eq(index);
                var productId = $li.find('input[name$=".Id"]').val();

                var product = {
                    id: parseInt($li.find('input[name$=".Id"]').val()),
                    name: $li.find('input[name$=".Name"]').val(),
                    price: parseFloat($li.find('input[name$=".UnitPrice"]').val()),
                    quantity: parseInt($li.find('input[name$=".Quantity"]').val()),
                    orderOptions: []
                };

                var productOptions = []; // Kolekcja opcji dla produktu
                var currentOption = {}; // Tymczasowy obiekt do przechowywania bieżącej opcji

                $li.find('input[name^="products[' + index + '].OrderOptions"]').each(function () {
                    var name = $(this).attr('name');
                    var value = $(this).val();

                    if (name.endsWith('.OptionSet.Id')) {
                        if (Object.keys(currentOption).length > 0) {
                            productOptions.push(currentOption);
                        }
                        currentOption = {
                            OptionSetId: parseInt(value)
                        };
                    } else if (name.endsWith('.OptionSet.Name')) {
                        currentOption.OptionSetName = value;
                    } else if (name.endsWith('.Option.Id')) {
                        currentOption.OptionId = parseInt(value);
                    } else if (name.endsWith('.Option.Name')) {
                        currentOption.OptionName = value;
                    } else if (name.endsWith('.Option.Price')) {
                        currentOption.Price = parseFloat(value);
                    }
                });

                if (Object.keys(currentOption).length > 0) {
                    productOptions.push(currentOption);
                }

                product.orderOptions = productOptions;

                $.ajax({
                    url: '/Order/GetProductDetailsWithOptions',
                    type: 'GET',
                    data: { id: productId },
                    success: function (productDetails) {
                        selectedProduct = productDetails;

                        var optionSetsHTML = '';
                        productDetails.optionSets.forEach(function (optionSet) {
                            var inputType = optionSet.isMultiple ? 'checkbox' : 'radio';
                            var requiredIndicator = optionSet.isRequired ? ' *' : '';
                            optionSetsHTML += `
                                    <h5>${optionSet.name}${requiredIndicator}</h5>
                                    <ul class="option-list">
                                `;
                            optionSet.options.forEach(function (option) {
                                var isChecked = product.orderOptions.some(function (selectedOption) {
                                    return selectedOption.OptionSetId === optionSet.id && selectedOption.OptionId === option.id;
                                });

                                optionSetsHTML += `
                                        <li>
                                            <label>
                                                <input type="${inputType}" class="option-input"
                                                    data-price="${option.price ?? 0}"
                                                    data-optionset-id="${optionSet.id}"
                                                    data-optionset-name="${optionSet.name}"
                                                    data-option-id="${option.id}"
                                                    data-option-name="${option.name}"
                                                    name="optionset-${optionSet.id}"
                                                    ${isChecked ? 'checked' : ''}
                                                />
                                                ${option.name} +${(option.price ?? 0).toFixed(2)} PLN
                                            </label>
                                        </li>
                                    `;
                            });
                            optionSetsHTML += '</ul>';
                        });

                        optionSetsHTML += `
                                <div class="form-group">
                                    <label for="product-quantity">Ilość:</label>
                                    <input type="number" id="product-quantity" class="form-control" value="${product.quantity}" min="1" />
                                </div>
                            `;

                        $('#productOptionsModal .modal-footer .confirm-add-product')
                            .text('Update Product')
                            .addClass('confirm-update-product')
                            .removeClass('confirm-add-product')
                            .data('index', index);

                        $('#productOptionsModal .modal-body').html(optionSetsHTML);
                        $('#productOptionsModal').modal('show');
                    },
                    error: function () {
                        alert('Error retrieving product details.');
                    }
                });
            });


            $('.add-product-button').click(function () {
                var productId = $(this).data('product-id');

                $.ajax({
                    url: '/Order/GetProductDetailsWithOptions',
                    type: 'GET',
                    data: { id: productId },
                    success: function (product) {
                        selectedProduct = product;

                        var optionSetsHTML = '';
                        product.optionSets.forEach(function (optionSet) {
                            var inputType = optionSet.isMultiple ? 'checkbox' : 'radio';
                            var requiredIndicator = optionSet.isRequired ? ' *' : '';
                            optionSetsHTML += `
                                <h5>${optionSet.name}${requiredIndicator}</h5>
                                <ul class="option-list">
                            `;
                            optionSet.options.forEach(function (option) {
                                optionSetsHTML += `
                                    <li>
                                        <label>
                                            <input type="${inputType}" class="option-input"
                                                data-price="${option.price ?? 0}"
                                                data-optionset-id="${optionSet.id}"
                                                data-optionset-name="${optionSet.name}"
                                                data-option-id="${option.id}"
                                                data-option-name="${option.name}"
                                                name="optionset-${optionSet.id}"
                                                />
                                            ${option.name} +${(option.price ?? 0).toFixed(2)} PLN
                                        </label>
                                    </li>
                                `;
                            });
                            optionSetsHTML += '</ul>';
                        });

                        optionSetsHTML += `
                            <div class="form-group">
                                <label for="product-quantity">Quantity:</label>
                                <input type="number" id="product-quantity" class="form-control" value="1" min="1" />
                            </div>
                        `;

                        $('#productOptionsModal .modal-footer .confirm-update-product')
                            .text('Add to order')
                            .addClass('confirm-add-product')
                            .removeClass('confirm-update-product');

                        $('#productOptionsModal .modal-body').html(optionSetsHTML);
                        $('#productOptionsModal').modal('show');
                    },
                    error: function () {
                        alert('Error retrieving product details.');
                    }
                });
            });

            function updateNoItemsMessage() {
                var productCount = $('#orderSummary li').length;
                if (productCount === 0) {
                    $('#noItemsMessage').show();
                } else {
                    $('#noItemsMessage').hide();
                }
            }

            function updateProductsValidationText() {
                var productCount = $('#orderSummary li').length;
                if (productCount === 0) {
                    $('#productsValidationText').text('Please add at least one product to your order.');
                } else {
                    $('#productsValidationText').text('');
                }
            }

            updateNoItemsMessage();

            $(document).on('click', '.confirm-add-product, .confirm-update-product', function () {
                if (!selectedProduct) {
                    alert('No product selected.');
                    return;
                }

                var quantity = parseInt($('#productOptionsModal #product-quantity').val()) || 1;

                if (quantity < 1) {
                    alert('Quantity must be at least 1.');
                    return;
                }

                var selectedOptions = [];
                var validationErrors = [];

                selectedProduct.optionSets.forEach(function (optionSet) {
                    var optionsSelected = [];
                    var $options = $('#productOptionsModal input[name="optionset-' + optionSet.id + '"]:checked');

                    $options.each(function () {
                        optionsSelected.push({
                            OptionSetId: parseInt($(this).data('optionset-id')),
                            OptionSetName: $(this).data('optionset-name'),
                            OptionId: parseInt($(this).data('option-id')),
                            OptionName: $(this).data('option-name'),
                            Price: parseFloat($(this).data('price'))
                        });
                    });

                    if (optionSet.isRequired && optionsSelected.length === 0) {
                        validationErrors.push('You must select at least one option from "' + optionSet.name + '".');
                    }

                    selectedOptions = selectedOptions.concat(optionsSelected);
                });

                if (validationErrors.length > 0) {
                    alert(validationErrors.join('\n'));
                    return;
                }

                var unitPrice = parseFloat(selectedProduct.price);
                selectedOptions.forEach(function (option) {
                    unitPrice += option.Price;
                });

                var productPrice = unitPrice * quantity;

                var isUpdating = $(this).hasClass('confirm-update-product');
                var index = isUpdating ? $(this).data('index') : $('#orderSummary li').length;

                var html = `
            <li id="product-${selectedProduct.id}-${index}">
                <input type="hidden" name="products[${index}].Id" value="${selectedProduct.id}" />
                <input type="hidden" name="products[${index}].Name" value="${selectedProduct.name}" />
                <input type="hidden" name="products[${index}].Price" value="${productPrice.toFixed(2)}" />
                <input type="hidden" name="products[${index}].UnitPrice" value="${unitPrice.toFixed(2)}" />
                <input type="hidden" name="products[${index}].Quantity" value="${quantity}" class="quantity-input" />
                <strong>
                    ${quantity} x ${selectedProduct.name}
                </strong>
                <span style="float:right">${productPrice.toFixed(2)} PLN</span>
                <ul class="list-unstyled">
            `;

                var groupedOptions = {};
                selectedOptions.forEach(function (opt) {
                    if (!groupedOptions[opt.OptionSetName]) {
                        groupedOptions[opt.OptionSetName] = [];
                    }
                    groupedOptions[opt.OptionSetName].push(opt);
                });

                var optionIndexCounter = 0;

                for (var optionSetName in groupedOptions) {
                    if (groupedOptions.hasOwnProperty(optionSetName)) {
                        var group = groupedOptions[optionSetName];

                        html += `${optionSetName}:<br>`;

                        group.forEach(function (option) {
                            html += `
                                <li class="option-item">
                                    <input type="hidden" name="products[${index}].OrderOptions[${optionIndexCounter}].OptionSet.Id" value="${option.OptionSetId}" />
                                    <input type="hidden" name="products[${index}].OrderOptions[${optionIndexCounter}].OptionSet.Name" value="${option.OptionSetName}" />
                                    <input type="hidden" name="products[${index}].OrderOptions[${optionIndexCounter}].Option.Id" value="${option.OptionId}" />
                                    <input type="hidden" name="products[${index}].OrderOptions[${optionIndexCounter}].Option.Name" value="${option.OptionName}" />
                                    <input type="hidden" name="products[${index}].OrderOptions[${optionIndexCounter}].Option.Price" value="${option.Price.toFixed(2)}" />
                                    - ${option.OptionName} ${option.Price > 0 ? `+${option.Price.toFixed(2)} PLN` : ''}
                                </li>

                        `;
                            optionIndexCounter++;
                        });
                    }
                }

                html += `
                </ul>
                <button type="button" class="edit-product-button btn btn-secondary btn-sm" data-index="${index}">Edit</button>
                <button type="button" class="remove-product-button btn btn-danger btn-sm" data-index="${index}">Remove</button>
                <hr />
            </li>
            `;

                if (isUpdating) {
                    $('#product-' + selectedProduct.id + '-' + index).replaceWith(html);
                } else {
                    $('#orderSummary').append(html);
                }

                reindexProducts();
                updateTotalPrice();
                updateNoItemsMessage();
                updateProductsValidationText();

                selectedProduct = null;

                $('#productOptionsModal').modal('hide');

                $(this).text('Add to order').addClass('confirm-add-product').removeClass('confirm-update-product').removeData('index');
            });

            $(document).on('click', '.btn-secondary[data-dismiss="modal"]', function () {
                $('#productOptionsModal').modal('hide');
            });

            $('#orderSummary').on('click', '.remove-product-button', function () {
                var $li = $(this).closest('li');
                var quantityInput = $li.find('input[name$=".Quantity"]');
                var quantity = parseInt(quantityInput.val()) || 1;
                var unitPrice = parseFloat($li.find('input[name$=".UnitPrice"]').val()) || 0;

                if (quantity > 1) {
                    quantity--;
                    quantityInput.val(quantity);
                    var newProductPrice = unitPrice * quantity;
                    $li.find('input[name$=".Price"]').val(newProductPrice.toFixed(2));
                    $li.find('strong').text(quantity + ' x ' + $li.find('input[name$=".Name"]').val());
                    $li.find('span[style="float:right"]').text(newProductPrice.toFixed(2) + ' PLN');
                } else {
                    $li.remove();
                    reindexProducts();
                    updateNoItemsMessage();
                }
                updateTotalPrice();
            });


            function updateTotalPrice() {
                var totalPrice = 0;
                $('#orderSummary li').each(function () {
                    var quantity = parseInt($(this).find('.quantity-input').val()) || 1;
                    var price = parseFloat($(this).find('input[name$=".UnitPrice"]').val()) || 0;
                    totalPrice += quantity * price;
                    $(this).find('span[style="float:right"]').text((quantity * price).toFixed(2) + ' PLN');
                });
                $('#totalPrice').text('Total price: ' + totalPrice.toFixed(2) + ' PLN');
            }

            function reindexProducts() {
                $('#orderSummary li[id^="product-"]').each(function (productIndex) {
                    var $productLi = $(this);
                    $productLi.attr('id', 'product-' + $productLi.find('input[name$=".Id"]').val() + '-' + productIndex);

                    $productLi.find('input, select').each(function () {
                        var name = $(this).attr('name');
                        if (name) {
                            var newName = name.replace(/products\[\d+\]/, 'products[' + productIndex + ']');

                            $(this).attr('name', newName);
                        }
                    });

                    $productLi.find('.edit-product-button, .remove-product-button').attr('data-index', productIndex);
                });
            }
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
