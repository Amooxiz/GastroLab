@using GastroLab.Application.ViewModels
@model GastroLab.Application.ViewModels.OrderFilterVM

@{
    ViewBag.Title = "Historical Orders";
}

<h2>Historical orders</h2>

<div class="filter-panel">
    <form id="filterForm" method="get" action="@Url.Action("GetHistoricalOrders")" class="form-inline">

        <input type="hidden" name="SortColumn" value="@Model.SortColumn" />
        <input type="hidden" name="SortDirection" value="@Model.SortDirection" />
        <input type="hidden" name="PageNumber" value="1" />
        <input type="hidden" name="PageSize" value="@Model.PageSize" />

        <div class="row">
            <div class="col">
                <div class="form-group">
                    <label for="DeliveryMethod">Delivery method:</label>
                    @Html.DropDownListFor(m => m.DeliveryMethod,
                             new SelectList(Enum.GetValues(typeof(DeliveryMethod)).Cast<DeliveryMethod>().Select(dm => new { Value = (int)dm, Text = dm.ToString() }), "Value", "Text", Model.DeliveryMethod),
                             "All",
                             new { @class = "form-control", id = "DeliveryMethod" })
                </div>
            </div>

            <div class="col">
                <div class="form-group">
                    <label>Creation date:</label>
                    <div class="dropdown">
                        <button type="button" id="creationDateDropdownBtn" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                            dd.mm.yyyy - dd.mm.yyyy
                        </button>
                        <div class="dropdown-menu p-4">
                            <div class="mb-3">
                                <label for="CreationDateFrom" class="form-label">From:</label>
                                @Html.TextBoxFor(m => m.CreationDateFrom, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "CreationDateFrom" })
                            </div>
                            <div class="mb-3">
                                <label for="CreationDateTo" class="form-label">To:</label>
                                @Html.TextBoxFor(m => m.CreationDateTo, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "CreationDateTo" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="form-group">
                    <label>Completion date:</label>
                    <div class="dropdown">
                        <button type="button" id="completionDateDropdownBtn" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                            dd.mm.yyyy - dd.mm.yyyy
                        </button>
                        <div class="dropdown-menu p-4">
                            <div class="mb-3">
                                <label for="CompletionDateFrom" class="form-label">From:</label>
                                @Html.TextBoxFor(m => m.CompletionDateFrom, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "CompletionDateFrom" })
                            </div>
                            <div class="mb-3">
                                <label for="CompletionDateTo" class="form-label">To:</label>
                                @Html.TextBoxFor(m => m.CompletionDateTo, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "CompletionDateTo" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="form-group">
                    <label>Scheduled delivery date:</label>
                    <div class="dropdown">
                        <button type="button" id="scheduledDateDropdownBtn" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside" @(Model.IsScheduledDelivery ? "" : "disabled")>
                            dd.mm.yyyy - dd.mm.yyyy
                        </button>
                        <div class="dropdown-menu p-4">
                            <div class="mb-3">
                                <label for="ScheduledDeliveryDateFrom" class="form-label">From:</label>
                                @Html.TextBoxFor(m => m.ScheduledDeliveryDateFrom, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "ScheduledDeliveryDateFrom" })
                            </div>
                            <div class="mb-3">
                                <label for="ScheduledDeliveryDateTo" class="form-label">To:</label>
                                @Html.TextBoxFor(m => m.ScheduledDeliveryDateTo, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "ScheduledDeliveryDateTo" })
                            </div>
                        </div>
                    </div>
                    <div class="form-check" style="margin-top: 5px;">
                        @Html.CheckBoxFor(m => m.IsScheduledDelivery, new { id = "IsScheduledDelivery", @class = "form-check-input" })
                        <label class="form-check-label" for="IsScheduledDelivery">Scheduled delivery</label>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="form-group">
                    <label for="WaitingTimeOption">Waiting time:</label>
                    @Html.DropDownListFor(m => m.WaitingTimeOption,
                             new SelectList(ViewBag.WaitingTimeOptions as List<SelectListItem>, "Value", "Text", Model.WaitingTimeOption),
                             new { @class = "form-control", id = "WaitingTimeOption" })
                </div>
                
            </div>
            <div class="col">
                <div class="form-group">
                    <div id="waitingTimeCustom" style="display:@(Model.WaitingTimeOption == "custom" ? "block" : "none");">
                        <label>From:</label>
                        @Html.TextBoxFor(m => m.WaitingTimeFrom, new { @class = "form-control", type = "number", min = "0" })
                        <label>To:</label>
                        @Html.TextBoxFor(m => m.WaitingTimeTo, new { @class = "form-control", type = "number", min = "0" })
                    </div>
                </div>
            </div>
        </div>

        

        <div class="row" style="margin-top: 5px;">
            <div class="col-md-12">
                <div class="form-group">
                    <label>Products:</label>
                    <div id="selectedProductsArea"
                        @if (Model.SelectedProductIds != null && Model.SelectedProductIds.Any())
                        {
                            foreach (var productId in Model.SelectedProductIds)
                            {
                                var product = ((List<ProductVM>)ViewBag.AllProducts).FirstOrDefault(p => p.Id == productId);
                                if (product != null)
                                {
                                    <span class="selected-product" data-product-id="@product.Id">
                                        @product.Name <button type="button" class="remove-product-btn">X</button>
                                    </span>
                                }
                            }
                        }
                    </div>
                    <div class="d-flex align-items-center" style="margin-top: 10px;">
                        <button type="button" id="openProductOffcanvasBtn" class="btn btn-secondary">Select products</button>
                        <div class="ms-auto">
                            <button type="button" id="resetFiltersBtn" class="btn btn-remove-filters btn-lg me-2">
                                <i class="bi bi-eraser"></i> Remove filters
                            </button>
                            <button type="submit" class="btn btn-primary btn-lg ms-auto">
                                <i class="bi bi-funnel"></i> Filter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<hr />

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>
                <div class="header-cell">
                <a href="#" class="sort-header" data-column="Id">
                    Id
                    @if (Model.SortColumn == "Id")
                    {
                        <i class="bi bi-arrow-@(Model.SortDirection == "asc" ? "up" : "down")"></i>
                    }
                </a>
                </div>
            </th>
            <th>
                <div class="header-cell">
                    Products
                </div>
            </th>
            <th>
                <div class="header-cell">
                <a href="#" class="sort-header" data-column="DeliveryMethod">
                    Delivery method
                    @if (Model.SortColumn == "DeliveryMethod")
                    {
                        <i class="bi bi-arrow-@(Model.SortDirection == "asc" ? "up" : "down")"></i>
                    }
                </a>
                </div>
            </th>
            <th>
                <div class="header-cell">
                <a href="#" class="sort-header" data-column="WaitingTime">
                    Expected waiting time
                    @if (Model.SortColumn == "WaitingTime")
                    {
                        <i class="bi bi-arrow-@(Model.SortDirection == "asc" ? "up" : "down")"></i>
                    }
                </a>
                </div>
            </th>
            <th>
                <div class="header-cell">
                <a href="#" class="sort-header" data-column="ActualWaitingTime">
                    Actual waiting time
                    @if (Model.SortColumn == "ActualWaitingTime")
                    {
                        <i class="bi bi-arrow-@(Model.SortDirection == "asc" ? "up" : "down")"></i>
                    }
                </a>
            </th>
            <th>
                <div class="header-cell">
                <a href="#" class="sort-header" data-column="CreationDate">
                    Creation date
                    @if (Model.SortColumn == "CreationDate")
                    {
                        <i class="bi bi-arrow-@(Model.SortDirection == "asc" ? "up" : "down")"></i>
                    }
                </a>
                </div>
            </th>
            <th>
                <div class="header-cell">
                <a href="#" class="sort-header" data-column="CompletionDate">
                    Completion date
                    @if (Model.SortColumn == "CompletionDate")
                    {
                        <i class="bi bi-arrow-@(Model.SortDirection == "asc" ? "up" : "down")"></i>
                    }
                </a>
                </div>
            </th>
            <th>
                <div class="header-cell">
                <a href="#" class="sort-header" data-column="ScheduledDeliveryDate">
                    Scheduled delivery date
                    @if (Model.SortColumn == "ScheduledDeliveryDate")
                    {
                        <i class="bi bi-arrow-@(Model.SortDirection == "asc" ? "up" : "down")"></i>
                    }
                </a>
                </div>
            </th>
            <th>
                <div class="header-cell">
                <a href="#" class="sort-header" data-column="TotalPrice">
                    Total price
                    @if (Model.SortColumn == "TotalPrice")
                    {
                        <i class="bi bi-arrow-@(Model.SortDirection == "asc" ? "up" : "down")"></i>
                    }
                </a>
                </div>
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Orders != null && Model.Orders.Any())
        {
            foreach (var order in Model.Orders)
            {
                <tr class="order-row" data-order-id="@order.Id">
                    <td class="center-content">@order.Id</td>
                    <td>
                        @foreach (var product in order.products)
                        {
                            <div><strong>@product.Quantity</strong>x @product.Name @String.Format("{0:0.00}", product.Price * product.Quantity) PLN</div>
                        }
                    </td>
                    <td class="center-content">@order.DeliveryMethod</td>
                    @if (order.isScheduledDelivery)
                    {
                        <td class="center-content">Scheduled</td>
                        <td class="center-content">Scheduled</td>
                    }
                    else
                    {
                        <td class="center-content">@order.WaitingTime min</td>
                        <td class="center-content">
                            @{
                                if (order.CompletionDate.HasValue)
                                {
                                    var actualWaitingTime = (int)Math.Floor((order.CompletionDate.Value - order.CreationDate).TotalMinutes);
                                    var color = actualWaitingTime > order.WaitingTime ? "red" : "green";
                                        <span style="color:@color">@actualWaitingTime min</span>
                                }
                                else
                                {
                                        <span>—</span>
                                }
                            }
                        </td>
                    }
                    <td class="center-content">@order.CreationDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td class="center-content">@(order.CompletionDate.HasValue ? order.CompletionDate.Value.ToString("yyyy-MM-dd HH:mm") : "—")</td>
                    <td class="center-content">@(order.ScheduledDeliveryDate.HasValue ? order.ScheduledDeliveryDate.Value.ToString("yyyy-MM-dd HH:mm") : "—")</td>
                    <td class="center-content">@String.Format("{0:0.00}", order.TotalPrice) PLN</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="9" class="text-center">No orders match the selected filters.</td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-end">
        @if (Model.PageNumber > 1)
        {
            <li class="page-item">
                <a class="page-link" href="#" data-page="@(@Model.PageNumber - 1)">Previous</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
        }

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (i == Model.PageNumber)
            {
                <li class="page-item active">
                    <span class="page-link">@i</span>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" href="#" data-page="@i">@i</a>
                </li>
            }
        }

        @if (Model.PageNumber < Model.TotalPages)
        {
            <li class="page-item">
                <a class="page-link" href="#" data-page="@(@Model.PageNumber + 1)">Next</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <span class="page-link">Next</span>
            </li>
        }
    </ul>
</nav>



<div class="offcanvas offcanvas-end" tabindex="-1" id="productSelectionOffcanvas" aria-labelledby="productSelectionOffcanvasLabel">
    <div class="offcanvas-header d-flex align-items-center">
        <h5 class="offcanvas-title me-auto" id="productSelectionOffcanvasLabel">Select products</h5>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="selectAllProductsCheckbox">
            <label class="form-check-label" for="selectAllProductsCheckbox">
                Select/Unselect all
            </label>
        </div>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <form id="productSelectionForm">
            <ul class="list-unstyled">
                @foreach (var product in ViewBag.AllProducts as List<ProductVM>)
                {
                    <li class="mb-2">
                        <div class="form-check">
                            <input class="form-check-input product-checkbox" type="checkbox" id="product_@product.Id" value="@product.Id"
                            @(Model.SelectedProductIds != null && Model.SelectedProductIds.Contains(product.Id) ? "checked" : "") />
                            <label class="form-check-label" for="product_@product.Id">
                                @product.Name
                            </label>
                        </div>
                    </li>
                }
            </ul>
        </form>
    </div>
    <div class="offcanvas-footer">
        <button type="button" id="addSelectedProductsBtn" class="btn btn-primary">Add</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="offcanvas">Cancel</button>
    </div>
</div>

<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Order Details - #<span id="modalOrderId"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-6">
                            <h5>Order Information</h5>
                            <div id="orderFlatFields">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h5>Products</h5>
                            <div id="orderProducts">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>




<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function () {

        $(document).on('click', '.order-row', function () {
            var orderId = $(this).data('order-id');
            $.ajax({
                url: '@Url.Action("GetOrderDetails")',
                type: 'GET',
                data: { id: orderId },
                success: function (order) {
                    $('#modalOrderId').text(order.id);


                    var flatFieldsHtml = '<table class="table table-sm table-borderless">';

                    flatFieldsHtml += '<tr><th>Order Id</th><td>' + order.id + '</td></tr>';

                    flatFieldsHtml += '<tr><th>Delivery method</th><td>' + order.deliveryMethodName + '</td></tr>';

                    flatFieldsHtml += '<tr><th>Status</th><td>' + order.statusName + '</td></tr>';

                    flatFieldsHtml += '<tr><th>Comment</th><td>' + (order.comment || '-') + '</td></tr>';

                    if (order.isScheduledDelivery) {
                        flatFieldsHtml += '<tr><th>Scheduled delivery date</th><td>' + (order.scheduledDeliveryDate ? new Date(order.scheduledDeliveryDate).toLocaleString() : '-') + '</td></tr>';
                    }
                    else {
                        flatFieldsHtml += '<tr><th>Expected waiting time</th><td>' + order.waitingTime + ' min</td></tr>';

                        var actualWaitingTime = '-';
                        if (order.completionDate) {
                            var creationDate = new Date(order.creationDate);
                            var completionDate = new Date(order.completionDate);
                            var diffMinutes = Math.floor((completionDate - creationDate) / 60000);
                            actualWaitingTime = diffMinutes + ' min';
                        }
                        flatFieldsHtml += '<tr><th>Actual waiting time</th><td>' + actualWaitingTime + '</td></tr>';
                    }
                    

                    flatFieldsHtml += '<tr><th>Creation date</th><td>' + formatDateTime(order.creationDate) + '</td></tr>';

                    flatFieldsHtml += '<tr><th>Completion date</th><td>' + (order.completionDate ? formatDateTime(order.completionDate) : '-') + '</td></tr>';

                    flatFieldsHtml += '<tr><th>Total price</th><td>' + parseFloat(order.totalPrice).toFixed(2) + ' PLN</td></tr>';

                    flatFieldsHtml += '</table>';

                    var conditionalSectionsHtml = '';

                    if (order.deliveryMethodName === 'DineIn') {
                        conditionalSectionsHtml += '<h6>Table Information</h6>';
                        conditionalSectionsHtml += '<table class="table table-sm table-borderless">';
                        conditionalSectionsHtml += '<tr><th>Table Number</th><td>' + (order.tableNr || '-') + '</td></tr>';
                        conditionalSectionsHtml += '</table>';
                    } else if (order.deliveryMethodName === 'Delivery') {
                        conditionalSectionsHtml += '<h6>Address</h6>';
                        conditionalSectionsHtml += '<table class="table table-sm table-borderless">';
                        conditionalSectionsHtml += '<tr><th>City</th><td>' + (order.address.city || '-') + '</td></tr>';
                        conditionalSectionsHtml += '<tr><th>Street</th><td>' + (order.address.street || '-') + '</td></tr>';
                        conditionalSectionsHtml += '<tr><th>House Number</th><td>' + (order.address.houseNumber || '-') + '</td></tr>';
                        conditionalSectionsHtml += '<tr><th>Flat Number</th><td>' + (order.address.flatNumber || '-') + '</td></tr>';
                        conditionalSectionsHtml += '<tr><th>Postal Code</th><td>' + (order.address.postCode || '-') + '</td></tr>';
                        conditionalSectionsHtml += '</table>';
                    }

                    var completeFieldsHtml = flatFieldsHtml + conditionalSectionsHtml;
                    $('#orderFlatFields').html(completeFieldsHtml);


                    var productsHtml = '<div class="list-group">';
                    if (order.products && order.products.length > 0) {
                        order.products.forEach(function (product) {
                            productsHtml += '<div class="list-group-item">';
                            productsHtml += '<h6>' + product.quantity + ' x ' + product.name + ' (' + (product.price * product.quantity).toFixed(2) + ' PLN)</h6>';
                            if (product.orderOptions && product.orderOptions.length > 0) {
                                productsHtml += '<ul class="list-unstyled ms-3">';
                                product.orderOptions.forEach(function (option) {
                                    productsHtml += '<li>' + option.optionSet.name + ': ' + option.option.name;
                                    if (option.option.price) {
                                        productsHtml += ' (' + parseFloat(option.option.price).toFixed(2) + ' PLN)';
                                    }
                                    productsHtml += '</li>';
                                });
                                productsHtml += '</ul>';
                            }
                            productsHtml += '</div>';
                        });
                    } else {
                        productsHtml += '<div class="list-group-item">No products in this order.</div>';
                    }
                    productsHtml += '</div>';
                    $('#orderProducts').html(productsHtml);

                    $('#orderDetailsModal').modal('show');
                },
                error: function () {
                    alert('Failed to get order details.');
                }
            });
        });

        function formatDateTime(dateTimeStr) {
            var date = new Date(dateTimeStr);
            if (isNaN(date)) {
                return dateTimeStr;
            }
            var day = ('0' + date.getDate()).slice(-2);
            var month = ('0' + (date.getMonth() + 1)).slice(-2);
            var year = date.getFullYear();
            var hours = ('0' + date.getHours()).slice(-2);
            var minutes = ('0' + date.getMinutes()).slice(-2);
            return day + '.' + month + '.' + year + ' ' + hours + ':' + minutes;
        }


        $('#selectAllProductsCheckbox').change(function () {
            var isChecked = $(this).is(':checked');
            $('#productSelectionForm .product-checkbox').prop('checked', isChecked);
        });

        $('#productSelectionForm').on('change', '.product-checkbox', function () {
            var totalCheckboxes = $('#productSelectionForm .product-checkbox').length;
            var checkedCheckboxes = $('#productSelectionForm .product-checkbox:checked').length;

            if (checkedCheckboxes === totalCheckboxes) {
                $('#selectAllProductsCheckbox').prop('checked', true);
            } else {
                $('#selectAllProductsCheckbox').prop('checked', false);
            }
        });

        $('#productSelectionOffcanvas').on('shown.bs.offcanvas', function () {
            var totalCheckboxes = $('#productSelectionForm .product-checkbox').length;
            var checkedCheckboxes = $('#productSelectionForm .product-checkbox:checked').length;

            if (checkedCheckboxes === totalCheckboxes && totalCheckboxes > 0) {
                $('#selectAllProductsCheckbox').prop('checked', true);
            } else {
                $('#selectAllProductsCheckbox').prop('checked', false);
            }
        });

        $('#resetFiltersBtn').click(function () {
            $('#filterForm')[0].reset();

            $('#DeliveryMethod').val('');
            $('#WaitingTimeOption').val('all');

            $('#waitingTimeCustom').hide();
            $('#WaitingTimeFrom').val('');
            $('#WaitingTimeTo').val('');

            $('#CreationDateFrom, #CreationDateTo, #CompletionDateFrom, #CompletionDateTo, #ScheduledDeliveryDateFrom, #ScheduledDeliveryDateTo').val('');
            updateCreationDateButtonLabel();
            updateCompletionDateButtonLabel();
            updateScheduledDateButtonLabel();

            $('#IsScheduledDelivery').prop('checked', false);
            $('#scheduledDateDropdownBtn').prop('disabled', true);

            $('#selectedProductsArea').empty();
            $('input[name="SelectedProductIds"]').remove();
            $('#productSelectionForm .product-checkbox').prop('checked', false);

            $('input[name="SortColumn"]').val('');
            $('input[name="SortDirection"]').val('');
            $('input[name="PageNumber"]').val(1);

            $('#filterForm').submit();
        });

        $('.pagination').on('click', 'a.page-link', function (e) {
            e.preventDefault();
            var pageNumber = $(this).data('page');
            $('input[name="PageNumber"]').val(pageNumber);
            $('#filterForm').submit();
        });

        $('#filterForm').on('change', 'input, select', function () {
            $('input[name="PageNumber"]').val(1);
        });

        $('.sort-header').click(function (e) {
            e.preventDefault();
            var column = $(this).data('column');
            var currentSortColumn = $('input[name="SortColumn"]').val();
            var currentSortDirection = $('input[name="SortDirection"]').val();
            var newSortDirection = 'asc';

            if (currentSortColumn === column) {
                newSortDirection = (currentSortDirection === 'asc') ? 'desc' : 'asc';
            } else {
                newSortDirection = 'asc';
            }

            $('input[name="SortColumn"]').val(column);
            $('input[name="SortDirection"]').val(newSortDirection);

            $('input[name="PageNumber"]').val(1);

            $('#filterForm').submit();
        });

        function formatDate(dateString) {
            if (!dateString) return 'dd.mm.yyyy';
            var date = new Date(dateString);
            if (isNaN(date)) return 'dd.mm.yyyy';
            var day = ('0' + date.getDate()).slice(-2);
            var month = ('0' + (date.getMonth() + 1)).slice(-2);
            var year = date.getFullYear();
            return day + '.' + month + '.' + year;
        }

        function updateCreationDateButtonLabel() {
            var fromDate = $('#CreationDateFrom').val();
            var toDate = $('#CreationDateTo').val();

            var label = 'dd.mm.yyyy - dd.mm.yyyy';

            if (fromDate || toDate) {
                var fromLabel = formatDate(fromDate);
                var toLabel = formatDate(toDate);
                label = fromLabel + ' - ' + toLabel;
            }

            $('#creationDateDropdownBtn').text(label);
        }

        function updateCompletionDateButtonLabel() {
            var fromDate = $('#CompletionDateFrom').val();
            var toDate = $('#CompletionDateTo').val();

            var label = 'dd.mm.yyyy - dd.mm.yyyy';

            if (fromDate || toDate) {
                var fromLabel = formatDate(fromDate);
                var toLabel = formatDate(toDate);
                label = fromLabel + ' - ' + toLabel;
            }

            $('#completionDateDropdownBtn').text(label);
        }

        function updateScheduledDateButtonLabel() {
            var fromDate = $('#ScheduledDeliveryDateFrom').val();
            var toDate = $('#ScheduledDeliveryDateTo').val();

            var label = 'dd.mm.yyyy - dd.mm.yyyy';

            if (fromDate || toDate) {
                var fromLabel = formatDate(fromDate);
                var toLabel = formatDate(toDate);
                label = fromLabel + ' - ' + toLabel;
            }

            $('#scheduledDateDropdownBtn').text(label);
        }

        $('#CreationDateFrom, #CreationDateTo').on('change', function () {
            updateCreationDateButtonLabel();
        });
        $('#CompletionDateFrom, #CompletionDateTo').on('change', function () {
            updateCompletionDateButtonLabel();
        });
        $('#ScheduledDeliveryDateFrom, #ScheduledDeliveryDateTo').on('change', function () {
            updateScheduledDateButtonLabel();
        });

        $('#creationDateDropdownBtn').closest('.dropdown').on('hidden.bs.dropdown', function () {
            updateCreationDateButtonLabel();
        });
        $('#completionDateDropdownBtn').closest('.dropdown').on('hidden.bs.dropdown', function () {
            updateCompletionDateButtonLabel();
        });
        $('#scheduledDateDropdownBtn').closest('.dropdown').on('hidden.bs.dropdown', function () {
            updateScheduledDateButtonLabel();
        });

        updateCreationDateButtonLabel();
        updateCompletionDateButtonLabel();
        updateScheduledDateButtonLabel();

        $('#IsScheduledDelivery').change(function () {
            if ($(this).is(':checked')) {
                $('#scheduledDateDropdownBtn').prop('disabled', false);
            } else {
                $('#scheduledDateDropdownBtn').prop('disabled', true);
                $('#ScheduledDeliveryDateFrom, #ScheduledDeliveryDateTo').val('');
                updateScheduledDateButtonLabel();
            }
        });

        if (!$('#IsScheduledDelivery').is(':checked')) {
            $('#scheduledDateDropdownBtn').prop('disabled', true);
        }

        var productOffcanvas = new bootstrap.Offcanvas(document.getElementById('productSelectionOffcanvas'));

        $('#openProductOffcanvasBtn').click(function () {
            productOffcanvas.show();
        });

        $('#addSelectedProductsBtn').click(function () {
            var selectedProductIds = [];
            var selectedProductNames = [];
            $('#productSelectionForm .product-checkbox:checked').each(function () {
                var productId = $(this).val();
                var productName = $(this).next('label').text();
                selectedProductIds.push(productId);
                selectedProductNames.push({ id: productId, name: productName });
            });

            $('#selectedProductsArea').empty();

            for (var i = 0; i < selectedProductNames.length; i++) {
                var productId = selectedProductNames[i].id;
                var productName = selectedProductNames[i].name;
                var productHtml = '<span class="selected-product" data-product-id="' + productId + '">'
                    + productName + ' <button type="button" class="remove-product-btn">X</button></span> ';
                $('#selectedProductsArea').append(productHtml);
            }

            updateSelectedProductsInput();

            productOffcanvas.hide();
        });

        $('#selectedProductsArea').on('click', '.remove-product-btn', function () {
            var productId = $(this).parent('.selected-product').data('product-id');
            $(this).parent('.selected-product').remove();
            $('#productSelectionForm #product_' + productId).prop('checked', false);
            updateSelectedProductsInput();
        });

        function updateSelectedProductsInput() {
            $('input[name="SelectedProductIds"]').remove();
            $('#selectedProductsArea .selected-product').each(function () {
                var productId = $(this).data('product-id');
                var input = $('<input>').attr({
                    type: 'hidden',
                    name: 'SelectedProductIds',
                    value: productId
                });
                $('#selectedProductsArea').after(input);
            });
        }

        var existingProductIds = [];
        $('#selectedProductsArea .selected-product').each(function () {
            var productId = $(this).data('product-id');
            existingProductIds.push(productId);
            $('#productSelectionForm #product_' + productId).prop('checked', true);
        });
        updateSelectedProductsInput();

        $('#WaitingTimeOption').change(function () {
            if ($(this).val() === 'custom') {
                $('#waitingTimeCustom').slideDown();
            } else {
                $('#waitingTimeCustom').slideUp();
                $('#WaitingTimeFrom').val('');
                $('#WaitingTimeTo').val('');
            }
        });
    });
</script>

<style>


    .order-row:hover {
        background-color: #e9e0ef;
        cursor: pointer;
    }

    #orderFlatFields th {
        width: 150px;
        vertical-align: top;
    }

    #orderProducts .list-group-item {
        background-color: #f8f9fa;
        border: 1px solid #d3cde1;
        margin-bottom: 5px;
        border-radius: 5px;
    }

    #orderFlatFields h6 {
        margin-top: 20px;
        color: #5e387c;
    }

    #orderProducts ul.list-unstyled li {
        padding-left: 15px;
        position: relative;
    }

    #orderProducts ul.list-unstyled li::before {
        content: "•";
        position: absolute;
        left: 0;
        color: #5e387c;
    }

    #orderProducts {
        max-height: 400px;
        overflow-y: auto;
    }


    .filter-panel {
        background-color: #f1ebf5;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        border: 1px solid #d3cde1;
        box-shadow: inset 0 0 10px rgba(197, 189, 215, 0.5);
    }

    .filter-panel label {
        color: #5e387c;
        font-weight: bold;
    }

    .filter-panel .form-control {
        border-color: #d3cde1;
    }


    .filter-panel .btn-secondary {
        background-color: #5e387c; 
        border-color: #4a3066;
        color: #ffffff; 
    }

    .filter-panel .btn-secondary:hover {
        background-color: #4a3066; 
        border-color: #3b2555;
    }

    .filter-panel .btn-primary {
        background-color: #BC5EE4;
        border-color: #25171A;
        color: #ffffff;
    }

    .filter-panel .btn-primary:hover {
        background-color: #A14AC6;
        border-color: #25171A;
    }

        .filter-panel .btn-remove-filters {
            background-color: #C94B6A;
            border-color: #B03E5A;
            color: #ffffff;
        }

            .filter-panel .btn-remove-filters:hover {
                background-color: #B03E5A;
                border-color: #9A3550;
            }

        .filter-panel .d-flex.align-items-center .ms-auto .btn {
            margin-left: 5px;
        }

    #selectedProductsArea {
        background-color: #e9e0ef;
        border: 1px solid #d3cde1;
        padding: 10px;
        min-height: 50px;
        border-radius: 5px;
    }

    .selected-product {
        display: inline-block;
        background-color: #BC5EE4;
        color: #ffffff;
        padding: 5px 10px;
        margin: 2px;
        border-radius: 15px;
        border: 1px solid #A14AC6;
    }

        .selected-product button {
            background: none;
            border: none;
            font-weight: bold;
            color: #ffffff;
            margin-left: 5px;
            cursor: pointer;
        }

            .selected-product button:hover {
                color: #d9534f;
            }

    .offcanvas-footer {
        padding: 1rem;
        border-top: 1px solid #dee2e6;
        text-align: right;
    }

    .offcanvas-body {
        overflow-y: auto;
    }

    .offcanvas-body .form-check-input {
        transform: scale(1.3);
        margin-right: 10px;
    }

    .offcanvas-body .form-check-label {
        font-size: 1.1em;
    }

    .table th {
        font-size: 0.9em;
        justify-content: space-between;
        align-items: center;
    }

    .header-cell {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 8px;
    }

    .header-cell .sort-header {
            color: #5e387c;
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        text-decoration: none;
        color: inherit;
    }

    .header-cell .sort-header span {
        flex-grow: 1;
        word-wrap: break-word;
    }
    
    .header-cell .sort-header i {
        flex-shrink: 0;
        margin-left: 5px;
                color: inherit;
    }

    .header-cell .sort-header {
        cursor: pointer;
    }

    .header-cell .sort-header:hover {
                color: #A14AC6;
        text-decoration: underline;
    }

    .table {
        border: 1px solid #d3cde1;
        background-color: #ffffff;
        margin-top: 20px;
    }

    .table td {
        font-size: 0.9em;
            border-bottom: 1px solid #d3cde1;
            color: #4a3066;
    }

    .table td.center-content {
        text-align: center;
                color: #4a3066;
    }

    .table th {
        text-align: center;
        vertical-align: middle;
            background-color: #e9e0ef;
            color: #5e387c;
            border-bottom: 1px solid #d3cde1;
            font-weight: bold;
    }

        .table tr:nth-child(even) {
            background-color: #f6effa;
        }

        .table tr:hover {
            background-color: #e9e0ef;
        }

    .pagination .page-link {
        color: #5e387c;
    }

    .pagination .page-item.active .page-link {
        background-color: #BC5EE4;
        border-color: #BC5EE4;
        color: #ffffff;
    }

    .pagination .page-link:hover {
        color: #A14AC6;
    }

</style>

